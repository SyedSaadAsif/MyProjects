[org 0x0100]
jmp start
;all variables here
old_kbisr: dd 0
old_timer: dd 0
level: db 0;for detersecing which mazestring to print
supermode: db 0
terminate: db 0
tick: db 0
sec: dw 0
min: dw 0
score: dw 0
randNum: dw 0
playerpos: dw 0
m1_enemypos: dw 556,1172,1560,3416,3468
m2_enemypos: dw 2116,548,1228,2488,3420
m3_enemypos: dw 836,1516,1228,3084,2684
m4_enemypos: dw 528,896,2196,2440,3124
m5_enemypos: dw 532,592,1484,2156,2500


m1_collectiblepos: dw 540,1820,2756,3276,3772
m2_collectiblepos: dw 264,1508,1560,1868,2148
m3_collectiblepos: dw 848,1516,2500,2764,3412
m4_collectiblepos: dw 372,900,1404,1804,2916
m5_collectiblepos: dw 860,900,1516,3412,3484


endpos: dw 0
playerascii: db 2;232 very nice,233 is a good candidate;2 smiley fill;3 heart;4 diamond
enemyascii: db 15 ; 15 good enemy
collectibleascii: db 4
;start_menu =

;=========================================;end game_left_border_green strs==========================
eg_lb_str1_g: db 216,0,216,0,216,0,216,0,216,0;
eg_lb_str2_g: db 216,0,216,0x22,216,0,216,0,216,0;
eg_lb_str3_g: db 216,0,216,0x22,216,0,216,0,216,0;
eg_lb_str4_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_lb_str5_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_lb_str6_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_lb_str7_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_lb_str8_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_lb_str9_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_lb_str10_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_lb_str11_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_lb_str12_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_lb_str13_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_lb_str14_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_lb_str15_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_lb_str16_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_lb_str17_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_lb_str18_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_lb_str19_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_lb_str20_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_lb_str21_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_lb_str22_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_lb_str23_g: db 216,0,216,0x22,216,0,216,0,216,0;
eg_lb_str24_g: db 216,0,216,0x22,216,0,216,0,216,0;
eg_lb_str25_g: db 216,0,216,0,216,0,216,0,216,0;

;=========================================;end game_right_border_green strs==========================
eg_rb_str1_g: db 216,0,216,0,216,0,216,0,216,0;
eg_rb_str2_g: db 216,0,216,0,216,0,216,0x22,216,0;
eg_rb_str3_g: db 216,0,216,0,216,0,216,0x22,216,0;
eg_rb_str4_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_rb_str5_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_rb_str6_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_rb_str7_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_rb_str8_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_rb_str9_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_rb_str10_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_rb_str11_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_rb_str12_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_rb_str13_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_rb_str14_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_rb_str15_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_rb_str16_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_rb_str17_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_rb_str18_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_rb_str19_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_rb_str20_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_rb_str21_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_rb_str22_g: db 216,0,216,0x22,216,0,216,0x22,216,0;
eg_rb_str23_g: db 216,0,216,0,216,0,216,0x22,216,0;
eg_rb_str24_g: db 216,0,216,0,216,0,216,0x22,216,0;
eg_rb_str25_g: db 216,0,216,0,216,0,216,0,216,0;



;=========================================;end game_left_border_red strs==========================
eg_lb_str1_r: db 216,0,216,0,216,0,216,0,216,0;
eg_lb_str2_r: db 216,0,216,0x44,216,0,216,0,216,0;
eg_lb_str3_r: db 216,0,216,0x44,216,0,216,0,216,0;
eg_lb_str4_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_lb_str5_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_lb_str6_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_lb_str7_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_lb_str8_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_lb_str9_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_lb_str10_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_lb_str11_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_lb_str12_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_lb_str13_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_lb_str14_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_lb_str15_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_lb_str16_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_lb_str17_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_lb_str18_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_lb_str19_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_lb_str20_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_lb_str21_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_lb_str22_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_lb_str23_r: db 216,0,216,0x44,216,0,216,0,216,0;
eg_lb_str24_r: db 216,0,216,0x44,216,0,216,0,216,0;
eg_lb_str25_r: db 216,0,216,0,216,0,216,0,216,0;

;=========================================;end game_right_border_red strs==========================
eg_rb_str1_r: db 216,0,216,0,216,0,216,0,216,0;
eg_rb_str2_r: db 216,0,216,0,216,0,216,0x44,216,0;
eg_rb_str3_r: db 216,0,216,0,216,0,216,0x44,216,0;
eg_rb_str4_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_rb_str5_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_rb_str6_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_rb_str7_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_rb_str8_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_rb_str9_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_rb_str10_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_rb_str11_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_rb_str12_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_rb_str13_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_rb_str14_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_rb_str15_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_rb_str16_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_rb_str17_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_rb_str18_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_rb_str19_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_rb_str20_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_rb_str21_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_rb_str22_r: db 216,0,216,0x44,216,0,216,0x44,216,0;
eg_rb_str23_r: db 216,0,216,0,216,0,216,0x44,216,0;
eg_rb_str24_r: db 216,0,216,0,216,0,216,0x44,216,0;
eg_rb_str25_r: db 216,0,216,0,216,0,216,0,216,0;

;========================================================= maze_word strs;=========================================================
menu_wrd_str1:db 216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22;
menu_wrd_str2:db 216,0x22,216,0x22,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0,216,0;
menu_wrd_str3:db 216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0,216,0;
menu_wrd_str4:db 216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0,216,0;
menu_wrd_str5:db 216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0,216,0;
menu_wrd_str6:db 216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22;

;=========================================================run_word strs;=========================================================
menu_wrd_str1_b:db 216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22;
menu_wrd_str2_b:db 216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22;
menu_wrd_str3_b:db 216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22;
menu_wrd_str4_b:db 216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0x22,216,0x22;
menu_wrd_str5_b:db 216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22;
menu_wrd_str6_b:db 216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22;

;=========================================================menu choices strs;=========================================================
start_game:db 'START GAME'
quit:db 'QUIT GAME'
left_bracket:db'--['
right_bracket:db']--'

;==========================================================maze side strings;===============================================
enm:db  'ENEMIES: '
coll:db 'COLLECTIBLES: '
super_on_status: db 'SP Mode : On '
super_off_status: db 'SP Mode : Off'
score_str_min: db  '-> SCORE - 10'
score_str_plus: db '-> SCORE + 20'

movement_str: db 'MOVEMENT:'
sp_mode_str: db 'Toggle SP Mode'
arrow_str_1: db '|'
arrow_str_2: db 'v'

space_str_1: db ' ___________ '
space_str_2: db '|   space   |'
space_str_3: db '|___________|'

   
	
wasd_str_1: db '     __     '
wasd_str_2: db '  __|W |__  '
wasd_str_3: db ' |A |S |D | '

desc_str1:db '  reach     '
desc_str2:db 'under 2 mins'
desc_str3:db '   to win   '

quit_str:db 'QUIT GAME:'

esc_str1:db' _____ '
esc_str2:db'| esc |'
esc_str3:db'|_____|'

sepertion_str:db'________________'
sepertion_str_r:db'______________'

;=========================================================end_game print strs;=========================================================
score_str:db 'SCORE = '
time_str:db 'TIME  = '


;=========================================================you strs_green;=========================================================
you_str1 :db 216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22;
you_str2 :db 216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22;
you_str3 :db 216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22;
you_str4 :db 216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22;
you_str5 :db 216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22;
you_str6 :db 216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22;

;=========================================================you strs_red;=========================================================
you_str1_r :db 216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44;
you_str2_r :db 216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44;
you_str3_r :db 216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44;
you_str4_r :db 216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44;
you_str5_r :db 216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44;
you_str6_r :db 216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0x44,216,0x44,216,0x44,216,0x44,216,0x44,216,0x44;

;=========================================================win strs;=========================================================
win_str1 :db 216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22;
win_str2 :db 216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22;
win_str3 :db 216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22;
win_str4 :db 216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0x22,216,0x22;
win_str5 :db 216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22;
win_str6 :db 216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0x22,216,0,216,0,216,0x22,216,0x22,216,0,216,0,216,0,216,0,216,0x22,216,0x22;

;=========================================================lose strs;=========================================================
lose_str1 :db 216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0x44,216,0x44,216,0x44,216,0x44,216,0x44,216,0x44;
lose_str2 :db 216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0,216,0;
lose_str3 :db 216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0x44,216,0x44,216,0x44,216,0x44,216,0,216,0;
lose_str4 :db 216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0,216,0;
lose_str5 :db 216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0,216,0;
lose_str6 :db 216,0x44,216,0x44,216,0x44,216,0x44,216,0x44,216,0x44,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0x44,216,0x44,216,0,216,0,216,0,216,0,216,0x44,216,0x44,216,0x44,216,0x44,216,0x44,216,0x44,216,0x44,216,0x44;

;===================================================================;maze 1 m1strings here==================================================================

m1str1: db  216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51;
m1str2: db  216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m1str3: db  216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51;
m1str4: db  216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51
m1str5: db  216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51;
m1str6: db  216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51
m1str7: db  216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51
m1str8: db  216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51
m1str9: db  216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51
m1str10: db  216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51
m1str11: db  216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51
m1str12: db  216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51
m1str13: db  216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51
m1str14: db  216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51
m1str15: db  216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51
m1str16: db  216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51
m1str17: db  216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51
m1str18: db  216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51
m1str19: db  216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51
m1str20: db  216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51
m1str21: db  216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51
m1str22: db  216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51
m1str23: db  216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51
m1str24: db  216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51
m1str25: db 216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51;


;===================================================================// maze 2 m1strings here==============================
m2str1: db  216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51;
m2str2: db  216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m2str3: db  216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51;
m2str4: db  216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51
m2str5: db  216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51;
m2str6: db  216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51
m2str7: db  216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51
m2str8: db  216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51
m2str9: db  216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51
m2str10: db  216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51
m2str11: db  216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51
m2str12: db  216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51
m2str13: db  216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51
m2str14: db  216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51
m2str15: db  216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51
m2str16: db  216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51
m2str17: db  216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51
m2str18: db  216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51
m2str19: db  216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51
m2str20: db  216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51
m2str21: db  216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51
m2str22: db  216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51
m2str23: db  216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51
m2str24: db  216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51
m2str25: db 216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51;



;=======================================================;// maze 3 m3strings here========================
m3str1: db 216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51;
m3str2: db 216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m3str3: db 216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51;
m3str4: db 216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m3str5: db 216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51;
m3str6: db 216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m3str7: db 216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51;
m3str8: db 216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m3str9: db 216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m3str10: db 216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m3str11: db 216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51;
m3str12: db 216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m3str13: db 216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m3str14: db 216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m3str15: db 216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m3str16: db 216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m3str17: db 216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51;
m3str18: db 216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m3str19: db 216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51;
m3str20: db 216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m3str21: db 216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51;
m3str22: db 216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m3str23: db 216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51;
m3str24: db 216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m3str25: db 216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51;


;===================================================;// maze 4 m3strings here============================
m4str1: db 216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51;
m4str2: db 216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m4str3: db 216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51;
m4str4: db 216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m4str5: db 216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51;
m4str6: db 216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m4str7: db 216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51;
m4str8: db 216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m4str9: db 216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m4str10: db 216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m4str11: db 216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51;
m4str12: db 216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m4str13: db 216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m4str14: db 216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m4str15: db 216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m4str16: db 216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m4str17: db 216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51;
m4str18: db 216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m4str19: db 216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51;
m4str20: db 216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m4str21: db 216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51;
m4str22: db 216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m4str23: db 216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51;
m4str24: db 216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m4str25: db 216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51;

;===================================================;// maze 5 m3strings here============================
m5str1: db 216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51;
m5str2: db 216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m5str3: db 216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51;
m5str4: db 216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m5str5: db 216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51;
m5str6: db 216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m5str7: db 216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51;
m5str8: db 216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m5str9: db 216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m5str10: db 216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m5str11: db 216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51;
m5str12: db 216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m5str13: db 216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m5str14: db 216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m5str15: db 216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m5str16: db 216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m5str17: db 216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51;
m5str18: db 216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m5str19: db 216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51;
m5str20: db 216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m5str21: db 216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51;
m5str22: db 216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m5str23: db 216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51,216,0,216,0,216,51,216,51;
m5str24: db 216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,0,216,51,216,51;
m5str25: db 216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51,216,51;


;variables end;

;=============================== ; left border print _ end game grren============================================

left_border_green:
mov ax,eg_lb_str1_g
push ax
call printmenustr
mov ax,eg_lb_str2_g
push ax
call printmenustr
mov ax,eg_lb_str3_g
push ax
call printmenustr
mov ax,eg_lb_str4_g
push ax
call printmenustr
mov ax,eg_lb_str5_g
push ax
call printmenustr
mov ax,eg_lb_str6_g
push ax
call printmenustr
mov ax,eg_lb_str7_g
push ax
call printmenustr
mov ax,eg_lb_str8_g
push ax
call printmenustr
mov ax,eg_lb_str9_g
push ax
call printmenustr
mov ax,eg_lb_str10_g
push ax
call printmenustr
mov ax,eg_lb_str11_g
push ax
call printmenustr
mov ax,eg_lb_str12_g
push ax
call printmenustr
mov ax,eg_lb_str13_g
push ax
call printmenustr
mov ax,eg_lb_str14_g
push ax
call printmenustr
mov ax,eg_lb_str15_g
push ax
call printmenustr
mov ax,eg_lb_str16_g
push ax
call printmenustr
mov ax,eg_lb_str17_g
push ax
call printmenustr
mov ax,eg_lb_str18_g
push ax
call printmenustr
mov ax,eg_lb_str19_g
push ax
call printmenustr
mov ax,eg_lb_str20_g
push ax
call printmenustr
mov ax,eg_lb_str21_g
push ax
call printmenustr
mov ax,eg_lb_str22_g
push ax
call printmenustr
mov ax,eg_lb_str23_g
push ax
call printmenustr
mov ax,eg_lb_str24_g
push ax
call printmenustr
mov ax,eg_lb_str25_g
push ax
call printmenustr
mov byte [level],0
ret


;=============================== ; left border print _ end game red============================================

left_border_red:
mov ax,eg_lb_str1_r
push ax
call printmenustr
mov ax,eg_lb_str2_r
push ax
call printmenustr
mov ax,eg_lb_str3_r
push ax
call printmenustr
mov ax,eg_lb_str4_r
push ax
call printmenustr
mov ax,eg_lb_str5_r
push ax
call printmenustr
mov ax,eg_lb_str6_r
push ax
call printmenustr
mov ax,eg_lb_str7_r
push ax
call printmenustr
mov ax,eg_lb_str8_r
push ax
call printmenustr
mov ax,eg_lb_str9_r
push ax
call printmenustr
mov ax,eg_lb_str10_r
push ax
call printmenustr
mov ax,eg_lb_str11_r
push ax
call printmenustr
mov ax,eg_lb_str12_r
push ax
call printmenustr
mov ax,eg_lb_str13_r
push ax
call printmenustr
mov ax,eg_lb_str14_r
push ax
call printmenustr
mov ax,eg_lb_str15_r
push ax
call printmenustr
mov ax,eg_lb_str16_r
push ax
call printmenustr
mov ax,eg_lb_str17_r
push ax
call printmenustr
mov ax,eg_lb_str18_r
push ax
call printmenustr
mov ax,eg_lb_str19_r
push ax
call printmenustr
mov ax,eg_lb_str20_r
push ax
call printmenustr
mov ax,eg_lb_str21_r
push ax
call printmenustr
mov ax,eg_lb_str22_r
push ax
call printmenustr
mov ax,eg_lb_str23_r
push ax
call printmenustr
mov ax,eg_lb_str24_r
push ax
call printmenustr
mov ax,eg_lb_str25_r
push ax
call printmenustr
mov byte [level],0
ret


;=====================================; right border print _end game_green==========================================
right_border_green:
mov ax,eg_rb_str1_g
push ax
call printmenustr_r
mov ax,eg_rb_str2_g
push ax
call printmenustr_r
mov ax,eg_rb_str3_g
push ax
call printmenustr_r
mov ax,eg_rb_str4_g
push ax
call printmenustr_r
mov ax,eg_rb_str5_g
push ax
call printmenustr_r
mov ax,eg_rb_str6_g
push ax
call printmenustr_r
mov ax,eg_rb_str7_g
push ax
call printmenustr_r
mov ax,eg_rb_str8_g
push ax
call printmenustr_r
mov ax,eg_rb_str9_g
push ax
call printmenustr_r
mov ax,eg_rb_str10_g
push ax
call printmenustr_r
mov ax,eg_rb_str11_g
push ax
call printmenustr_r
mov ax,eg_rb_str12_g
push ax
call printmenustr_r
mov ax,eg_rb_str13_g
push ax
call printmenustr_r
mov ax,eg_rb_str14_g
push ax
call printmenustr_r
mov ax,eg_rb_str15_g
push ax
call printmenustr_r
mov ax,eg_rb_str16_g
push ax
call printmenustr_r
mov ax,eg_rb_str17_g
push ax
call printmenustr_r
mov ax,eg_rb_str18_g
push ax
call printmenustr_r
mov ax,eg_rb_str19_g
push ax
call printmenustr_r
mov ax,eg_rb_str20_g
push ax
call printmenustr_r
mov ax,eg_rb_str21_g
push ax
call printmenustr_r
mov ax,eg_rb_str22_g
push ax
call printmenustr_r
mov ax,eg_rb_str23_g
push ax
call printmenustr_r
mov ax,eg_rb_str24_g
push ax
call printmenustr_r
mov ax,eg_rb_str25_g
push ax
call printmenustr_r
mov byte [level],0
ret

;=====================================; right border print _end game_red==========================================
right_border_red:
mov ax,eg_rb_str1_r
push ax
call printmenustr_r
mov ax,eg_rb_str2_r
push ax
call printmenustr_r
mov ax,eg_rb_str3_r
push ax
call printmenustr_r
mov ax,eg_rb_str4_r
push ax
call printmenustr_r
mov ax,eg_rb_str5_r
push ax
call printmenustr_r
mov ax,eg_rb_str6_r
push ax
call printmenustr_r
mov ax,eg_rb_str7_r
push ax
call printmenustr_r
mov ax,eg_rb_str8_r
push ax
call printmenustr_r
mov ax,eg_rb_str9_r
push ax
call printmenustr_r
mov ax,eg_rb_str10_r
push ax
call printmenustr_r
mov ax,eg_rb_str11_r
push ax
call printmenustr_r
mov ax,eg_rb_str12_r
push ax
call printmenustr_r
mov ax,eg_rb_str13_r
push ax
call printmenustr_r
mov ax,eg_rb_str14_r
push ax
call printmenustr_r
mov ax,eg_rb_str15_r
push ax
call printmenustr_r
mov ax,eg_rb_str16_r
push ax
call printmenustr_r
mov ax,eg_rb_str17_r
push ax
call printmenustr_r
mov ax,eg_rb_str18_r
push ax
call printmenustr_r
mov ax,eg_rb_str19_r
push ax
call printmenustr_r
mov ax,eg_rb_str20_r
push ax
call printmenustr_r
mov ax,eg_rb_str21_r
push ax
call printmenustr_r
mov ax,eg_rb_str22_r
push ax
call printmenustr_r
mov ax,eg_rb_str23_r
push ax
call printmenustr_r
mov ax,eg_rb_str24_r
push ax
call printmenustr_r
mov ax,eg_rb_str25_r
push ax
call printmenustr_r
mov byte [level],0
ret
;==================================== ;mazeee print===========================================
menu_word:  
mov byte [level],3

mov ax,menu_wrd_str1
push ax
call printmenu_word_str
mov ax,menu_wrd_str2
push ax
call printmenu_word_str
mov ax,menu_wrd_str3
push ax
call printmenu_word_str
mov ax,menu_wrd_str4
push ax
call printmenu_word_str
mov ax,menu_wrd_str5
push ax
call printmenu_word_str
mov ax,menu_wrd_str6
push ax
call printmenu_word_str

mov byte [level],0
ret
;====================================;run  print===========================================
menu_word_run:
mov byte [level],11

mov ax,menu_wrd_str1_b
push ax
call printmenu_word_str_b
mov ax,menu_wrd_str2_b
push ax
call printmenu_word_str_b
mov ax,menu_wrd_str3_b
push ax
call printmenu_word_str_b
mov ax,menu_wrd_str4_b
push ax
call printmenu_word_str_b
mov ax,menu_wrd_str5_b
push ax
call printmenu_word_str_b
mov ax,menu_wrd_str6_b
push ax
call printmenu_word_str_b

mov byte [level],0
ret
;======================================;youuuuu  print green========================================
you_print:
mov byte [level],4

mov ax,you_str1
push ax
call print_you_strs
mov ax,you_str2
push ax
call print_you_strs
mov ax,you_str3
push ax
call print_you_strs
mov ax,you_str4
push ax
call print_you_strs
mov ax,you_str5
push ax
call print_you_strs
mov ax,you_str6
push ax
call print_you_strs

mov byte [level],0
ret

;======================================;youuuuu  print red========================================
you_print_red:
mov byte [level],4

mov ax,you_str1_r
push ax
call print_you_strs
mov ax,you_str2_r
push ax
call print_you_strs
mov ax,you_str3_r
push ax
call print_you_strs
mov ax,you_str4_r
push ax
call print_you_strs
mov ax,you_str5_r
push ax
call print_you_strs
mov ax,you_str6_r
push ax
call print_you_strs

mov byte [level],0
ret
;==========================================;winnnnnnnnn  print=====================================
win_print:
mov byte [level],11

mov ax,win_str1
push ax
call print_win_strs
mov ax,win_str2
push ax
call print_win_strs
mov ax,win_str3
push ax
call print_win_strs
mov ax,win_str4
push ax
call print_win_strs
mov ax,win_str5
push ax
call print_win_strs
mov ax,win_str6
push ax
call print_win_strs

mov byte [level],0
ret
;===========================================;loseeeee print====================================
lose_print:
mov byte [level],11

mov ax,lose_str1
push ax
call print_lose_strs
mov ax,lose_str2
push ax
call print_lose_strs
mov ax,lose_str3
push ax
call print_lose_strs
mov ax,lose_str4
push ax
call print_lose_strs
mov ax,lose_str5
push ax
call print_lose_strs
mov ax,lose_str6
push ax
call print_lose_strs

mov byte [level],0
ret
;=============================================;printing start game==================================
menu_sg_print:
mov byte [level],19

mov ax,start_game
push ax
call print_sg

mov byte [level],0

ret
;=============================================;printing quit game==================================
menu_qg_print:
mov byte [level],22

mov ax,quit
push ax
call print_qg

mov byte [level],0

ret

;=============================================;printing score string==================================
eg_score_print:
mov byte [level],19

mov ax,score_str
push ax
call print_score_str

mov byte [level],0

ret

;=============================================;printing time string==================================
eg_time_print:
mov byte [level],21

mov ax,time_str
push ax
call print_time_str

mov byte [level],0

ret

;=============================================;printing score string for maze==================================
mz_score_print:
mov byte [level],2

mov ax,score_str
push ax
call print_score_str_mz

mov byte [level],0

ret

;=============================================;printing enemy string for maze==================================
mz_enemy_print:
mov byte [level],7

mov ax,enm
push ax
call print_enemy_str_mz

mov byte [level],0

ret

;=============================================;printing collectibles string for maze==================================
mz_coll_print:
mov byte [level],9

mov ax,coll
push ax
call print_coll_str_mz

mov byte [level],0

ret

;=============================================;printing time string for maze==================================
mz_time_print:
mov byte [level],1

mov ax,time_str
push ax
call print_time_str_mz

mov byte [level],0

ret


;================================================;brackets for start game===============================
print_b_sg:
mov byte [level],19

mov ax,left_bracket
push ax
call print_lb_a
mov byte [level],19
mov ax,right_bracket
push ax
call print_rb_a

mov byte [level],0

ret
;=========================================;brackets for quit game======================================
print_b_qg:
mov byte [level],22

mov ax,left_bracket
push ax
call print_lb_b
mov byte [level],22
mov ax,right_bracket
push ax
call print_rb_b

mov byte [level],0

ret
;=========================================;printiung the menu======================================

print_menu:
call clrscreen
call left_border_green
call right_border_green
call menu_word
call menu_word_run
call menu_sg_print
call menu_qg_print
call print_b_sg
jmp set_game

ret
;=============================================================;print maze 1=====================================
maze1:
call clrscreen
mov ax,m1str1
push ax
call printm1str
mov ax,m1str2
push ax
call printm1str
mov ax,m1str3
push ax
call printm1str
mov ax,m1str4
push ax
call printm1str
mov ax,m1str5
push ax
call printm1str
mov ax,m1str6
push ax
call printm1str
mov ax,m1str7
push ax
call printm1str
mov ax,m1str8
push ax
call printm1str
mov ax,m1str9
push ax
call printm1str
mov ax,m1str10
push ax
call printm1str
mov ax,m1str11
push ax
call printm1str
mov ax,m1str12
push ax
call printm1str
mov ax,m1str13
push ax
call printm1str
mov ax,m1str14
push ax
call printm1str
mov ax,m1str15
push ax
call printm1str
mov ax,m1str16
push ax
call printm1str
mov ax,m1str17
push ax
call printm1str
mov ax,m1str18
push ax
call printm1str
mov ax,m1str19
push ax
call printm1str
mov ax,m1str20
push ax
call printm1str
mov ax,m1str21
push ax
call printm1str
mov ax,m1str22
push ax
call printm1str
mov ax,m1str23
push ax
call printm1str
mov ax,m1str24
push ax
call printm1str
mov ax,m1str25
push ax
call printm1str
mov byte [level],0
mov ax,0xb800
mov es,ax
mov ah,0x05
mov al,[playerascii]
mov di,196
mov [playerpos],di ; update the first player position on maze
mov [es:di],ax ;player printing
mov al,227
mov di,3716

mov ah,0x05

mov [endpos],di
mov [es:di],ax;printing cherry pie

mov ah,0x04

mov di,[m1_enemypos];
mov al,[enemyascii];
mov [es:di],ax;printing enemy1
mov di,[m1_enemypos+2]
mov [es:di],ax;printing enemy2
mov di,[m1_enemypos+4]
mov [es:di],ax;printing enemy3
mov di,[m1_enemypos+6]
mov [es:di],ax;printing enemy4
mov di,[m1_enemypos+8]
mov [es:di],ax;printing enemy5

mov ah,0x02

mov di,[m1_collectiblepos];
mov al,[collectibleascii];
mov [es:di],ax;printing enemy1
mov di,[m1_collectiblepos+2]
mov [es:di],ax;printing enemy2
mov di,[m1_collectiblepos+4]
mov [es:di],ax;printing enemy3
mov di,[m1_collectiblepos+6]
mov [es:di],ax;printing enemy4
mov di,[m1_collectiblepos+8]
mov [es:di],ax;printing enemy5

call initial_sp
call maze_side

ret
;====================================================;print maze 2========================
maze2:
call clrscreen

mov ax,m2str1
push ax
call printm1str
mov ax,m2str2
push ax
call printm1str
mov ax,m2str3
push ax
call printm1str
mov ax,m2str4
push ax
call printm1str
mov ax,m2str5
push ax
call printm1str
mov ax,m2str6
push ax
call printm1str
mov ax,m2str7
push ax
call printm1str
mov ax,m2str8
push ax
call printm1str
mov ax,m2str9
push ax
call printm1str
mov ax,m2str10
push ax
call printm1str
mov ax,m2str11
push ax
call printm1str
mov ax,m2str12
push ax
call printm1str
mov ax,m2str13
push ax
call printm1str
mov ax,m2str14
push ax
call printm1str
mov ax,m2str15
push ax
call printm1str
mov ax,m2str16
push ax
call printm1str
mov ax,m2str17
push ax
call printm1str
mov ax,m2str18
push ax
call printm1str
mov ax,m2str19
push ax
call printm1str
mov ax,m2str20
push ax
call printm1str
mov ax,m2str21
push ax
call printm1str
mov ax,m2str22
push ax
call printm1str
mov ax,m2str23
push ax
call printm1str
mov ax,m2str24
push ax
call printm1str
mov ax,m2str25
push ax
call printm1str
mov byte [level],0
mov ax,0xb800
mov es,ax
mov ah,0x05
mov al,[playerascii]
mov di,196
mov [playerpos],di ; update the first player position on maze
mov [es:di],ax ;player printing
mov al,227
mov di,3732

mov ah,0x05

mov [endpos],di

mov [es:di],ax;printing cherry pie

mov ah,0x04

mov di,[m2_enemypos];
mov al,[enemyascii];
mov [es:di],ax;printing enemy1
mov di,[m2_enemypos+2]
mov [es:di],ax;printing enemy2
mov di,[m2_enemypos+4]
mov [es:di],ax;printing enemy3
mov di,[m2_enemypos+6]
mov [es:di],ax;printing enemy4
mov di,[m2_enemypos+8]
mov [es:di],ax;printing enemy5

mov ah,0x02

mov di,[m2_collectiblepos];
mov al,[collectibleascii];
mov [es:di],ax;printing enemy1
mov di,[m2_collectiblepos+2]
mov [es:di],ax;printing enemy2
mov di,[m2_collectiblepos+4]
mov [es:di],ax;printing enemy3
mov di,[m2_collectiblepos+6]
mov [es:di],ax;printing enemy4
mov di,[m2_collectiblepos+8]
mov [es:di],ax;printing enemy5

call maze_side
call initial_sp
ret
;====================================================;print maze 3========================
maze3:
call clrscreen

mov ax,m3str1
push ax
call printm1str
mov ax,m3str2
push ax
call printm1str
mov ax,m3str3
push ax
call printm1str
mov ax,m3str4
push ax
call printm1str
mov ax,m3str5
push ax
call printm1str
mov ax,m3str6
push ax
call printm1str
mov ax,m3str7
push ax
call printm1str
mov ax,m3str8
push ax
call printm1str
mov ax,m3str9
push ax
call printm1str
mov ax,m3str10
push ax
call printm1str
mov ax,m3str11
push ax
call printm1str
mov ax,m3str12
push ax
call printm1str
mov ax,m3str13
push ax
call printm1str
mov ax,m3str14
push ax
call printm1str
mov ax,m3str15
push ax
call printm1str
mov ax,m3str16
push ax
call printm1str
mov ax,m3str17
push ax
call printm1str
mov ax,m3str18
push ax
call printm1str
mov ax,m3str19
push ax
call printm1str
mov ax,m3str20
push ax
call printm1str
mov ax,m3str21
push ax
call printm1str
mov ax,m3str22
push ax
call printm1str
mov ax,m3str23
push ax
call printm1str
mov ax,m3str24
push ax
call printm1str
mov ax,m3str25
push ax
call printm1str
mov byte [level],0
mov ax,0xb800
mov es,ax
mov ah,0x05
mov al,[playerascii]
mov di,196
mov [playerpos],di ; update the first player position on maze
mov [es:di],ax ;player printing
mov al,227
mov di,3716

mov ah,0x05

mov [endpos],di

mov [es:di],ax;printing cherry pie

mov ah,0x04

mov di,[m3_enemypos];
mov al,[enemyascii];
mov [es:di],ax;printing enemy1
mov di,[m3_enemypos+2]
mov [es:di],ax;printing enemy2
mov di,[m3_enemypos+4]
mov [es:di],ax;printing enemy3
mov di,[m3_enemypos+6]
mov [es:di],ax;printing enemy4
mov di,[m3_enemypos+8]
mov [es:di],ax;printing enemy5
;collectibles

mov ah,0x02

mov di,[m3_collectiblepos];
mov al,[collectibleascii];
mov [es:di],ax;printing enemy1
mov di,[m3_collectiblepos+2]
mov [es:di],ax;printing enemy2
mov di,[m3_collectiblepos+4]
mov [es:di],ax;printing enemy3
mov di,[m3_collectiblepos+6]
mov [es:di],ax;printing enemy4
mov di,[m3_collectiblepos+8]
mov [es:di],ax;printing enemy5

call maze_side
call initial_sp
ret

;===================================================;print maze 4=========================
maze4:
call clrscreen

mov ax,m4str1
push ax
call printm1str
mov ax,m4str2
push ax
call printm1str
mov ax,m4str3
push ax
call printm1str
mov ax,m4str4
push ax
call printm1str
mov ax,m4str5
push ax
call printm1str
mov ax,m4str6
push ax
call printm1str
mov ax,m4str7
push ax
call printm1str
mov ax,m4str8
push ax
call printm1str
mov ax,m4str9
push ax
call printm1str
mov ax,m4str10
push ax
call printm1str
mov ax,m4str11
push ax
call printm1str
mov ax,m4str12
push ax
call printm1str
mov ax,m4str13
push ax
call printm1str
mov ax,m4str14
push ax
call printm1str
mov ax,m4str15
push ax
call printm1str
mov ax,m4str16
push ax
call printm1str
mov ax,m4str17
push ax
call printm1str
mov ax,m4str18
push ax
call printm1str
mov ax,m4str19
push ax
call printm1str
mov ax,m4str20
push ax
call printm1str
mov ax,m4str21
push ax
call printm1str
mov ax,m4str22
push ax
call printm1str
mov ax,m4str23
push ax
call printm1str
mov ax,m4str24
push ax
call printm1str
mov ax,m4str25
push ax
call printm1str
mov byte [level],0
mov ax,0xb800
mov es,ax
mov ah,0x05
mov al,[playerascii]
mov di,196
mov [playerpos],di ; update the first player position on maze
mov [es:di],ax ;player printing
mov al,227
mov di,3780

mov ah,0x05

mov [endpos],di
mov [es:di],ax;printing cherry pie
mov di,[m4_enemypos];
mov al,[enemyascii];
mov ah,0x04

mov [es:di],ax;printing enemy1
mov di,[m4_enemypos+2]
mov [es:di],ax;printing enemy2
mov di,[m4_enemypos+4]
mov [es:di],ax;printing enemy3
mov di,[m4_enemypos+6]
mov [es:di],ax;printing enemy4
mov di,[m4_enemypos+8]
mov [es:di],ax;printing enemy5

mov ah,0x02

;collectibles
mov di,[m4_collectiblepos];
mov al,[collectibleascii];
mov [es:di],ax;printing enemy1
mov di,[m4_collectiblepos+2]
mov [es:di],ax;printing enemy2
mov di,[m4_collectiblepos+4]
mov [es:di],ax;printing enemy3
mov di,[m4_collectiblepos+6]
mov [es:di],ax;printing enemy4
mov di,[m4_collectiblepos+8]
mov [es:di],ax;printing enemy5

call maze_side
call initial_sp
ret

;===================================================;print maze 5=========================
maze5:
call clrscreen

mov ax,m5str1
push ax
call printm1str
mov ax,m5str2
push ax
call printm1str
mov ax,m5str3
push ax
call printm1str
mov ax,m5str4
push ax
call printm1str
mov ax,m5str5
push ax
call printm1str
mov ax,m5str6
push ax
call printm1str
mov ax,m5str7
push ax
call printm1str
mov ax,m5str8
push ax
call printm1str
mov ax,m5str9
push ax
call printm1str
mov ax,m5str10
push ax
call printm1str
mov ax,m5str11
push ax
call printm1str
mov ax,m5str12
push ax
call printm1str
mov ax,m5str13
push ax
call printm1str
mov ax,m5str14
push ax
call printm1str
mov ax,m5str15
push ax
call printm1str
mov ax,m5str16
push ax
call printm1str
mov ax,m5str17
push ax
call printm1str
mov ax,m5str18
push ax
call printm1str
mov ax,m5str19
push ax
call printm1str
mov ax,m5str20
push ax
call printm1str
mov ax,m5str21
push ax
call printm1str
mov ax,m5str22
push ax
call printm1str
mov ax,m5str23
push ax
call printm1str
mov ax,m5str24
push ax
call printm1str
mov ax,m5str25
push ax
call printm1str
mov byte [level],0
mov ax,0xb800
mov es,ax
mov ah,0x05
mov al,[playerascii]
mov di,196
mov [playerpos],di ; update the first player position on maze
mov [es:di],ax ;player printing
mov al,227
mov di,3780
mov ah,0x05

mov [endpos],di
mov [es:di],ax;printing cherry pie
mov di,[m5_enemypos];
mov al,[enemyascii];

mov ah,0x04

mov [es:di],ax;printing enemy1
mov di,[m5_enemypos+2]
mov [es:di],ax;printing enemy2
mov di,[m5_enemypos+4]
mov [es:di],ax;printing enemy3
mov di,[m5_enemypos+6]
mov [es:di],ax;printing enemy4
mov di,[m5_enemypos+8]
mov [es:di],ax;printing enemy5

mov ah,0x02

;collectibles
mov di,[m5_collectiblepos];
mov al,[collectibleascii];
mov [es:di],ax;printing enemy1
mov di,[m5_collectiblepos+2]
mov [es:di],ax;printing enemy2
mov di,[m5_collectiblepos+4]
mov [es:di],ax;printing enemy3
mov di,[m5_collectiblepos+6]
mov [es:di],ax;printing enemy4
mov di,[m5_collectiblepos+8]
mov [es:di],ax;printing enemy5


call maze_side
call initial_sp
ret
;===========================================================================================
initial_sp:
pusha
mov ah,0x13
    mov al,0
    mov bh,0
mov bl,0x04
mov dh,22
    mov dl,67
    mov cx,13
    push ds
    pop es
    mov bp,super_off_status;the reference of the m1string to be printed
    int 0x10
popa
ret
;========================================================;clear scrren=======================
clrscreen:
pusha

mov ax, 0xb800
mov es, ax
xor di,di
mov ax, 0x0720
mov cx, 2000

cld
rep stosw

popa
ret
;=========================================================;for printing mazes===================
printm1str:
push bp
mov bp,sp
pusha
mov ah,0x13
    mov al,2
    mov bh,0
mov dh,[level];automatically increases
inc byte [level]
    mov dl, 0x10
    mov cx,50
    push ds
    pop es
    mov bp,[bp+4];the reference of the m1string to be printed
    int 0x10
popa
pop bp
ret 2
;====================================================;left boundry========================

printmenustr:
push bp
mov bp,sp
pusha
mov ah,0x13
    mov al,2
    mov bh,0
mov dh,[level];automatically increases
inc byte [level]
    mov dl, 0x00
    mov cx,5
    push ds
    pop es
    mov bp,[bp+4];the reference of the m1string to be printed
    int 0x10
popa
pop bp
ret 2
;==================================================;right boundry==========================

printmenustr_r:
push bp
mov bp,sp
pusha
mov ah,0x13
    mov al,2
    mov bh,0
mov dh,[level];automatically increases
inc byte [level]
    mov dl, 0x4A
    mov cx,5
    push ds
    pop es
    mov bp,[bp+4];the reference of the m1string to be printed
    int 0x10
popa
pop bp
ret 2
;=====================================================;maze str print=======================
printmenu_word_str:
push bp
mov bp,sp
pusha
mov ah,0x13
    mov al,2
    mov bh,0
mov dh,[level];automatically increases
inc byte [level]
    mov dl, 0x14
    mov cx,40
    push ds
    pop es
    mov bp,[bp+4];the reference of the m1string to be printed
    int 0x10
popa
pop bp
ret 2
;======================================================;run str print======================
printmenu_word_str_b:
push bp
mov bp,sp
pusha
mov ah,0x13
    mov al,2
    mov bh,0
mov dh,[level];automatically increases
inc byte [level]
    mov dl, 0x1A
    mov cx,28
    push ds
    pop es
    mov bp,[bp+4];the reference of the m1string to be printed
    int 0x10
popa
pop bp
ret 2
;=================================================;start game str print===========================
print_sg:
push bp
mov bp,sp
pusha
mov ah,0x13
    mov al,0
    mov bh,0
mov bl,0x0b
mov dh,[level];automatically increases
inc byte [level]
    mov dl,0x23
    mov cx,10
    push ds
    pop es
    mov bp,[bp+4];the reference of the m1string to be printed
    int 0x10
popa
pop bp
ret 2

;=================================================; score str print===========================
print_score_str:
push bp
mov bp,sp
pusha
mov ah,0x13
    mov al,0
    mov bh,0
mov bl,0x07
mov dh,[level];automatically increases
inc byte [level]
    mov dl,0x20
    mov cx,8
    push ds
    pop es
    mov bp,[bp+4];the reference of the m1string to be printed
    int 0x10
popa
pop bp
ret 2

;=================================================; score str print_maze===========================

print_score_str_mz:
push bp
mov bp,sp
pusha
mov ah,0x13
    mov al,0
    mov bh,0
mov bl,0x07
mov dh,[level];automatically increases
    mov dl,0x00
    mov cx,8
    push ds
    pop es
    mov bp,[bp+4];the reference of the m1string to be printed
    int 0x10
popa
pop bp
ret 2

;=================================================; enemy str print_maze===========================

print_enemy_str_mz:
push bp
mov bp,sp
pusha
mov ah,0x13
    mov al,0
    mov bh,0
mov bl,0x04
mov dh,[level];automatically increases
    mov dl,0x00
    mov cx,9
    push ds
    pop es
    mov bp,[bp+4];the reference of the m1string to be printed
    int 0x10
popa
pop bp
ret 2

;==========================================;show enemy and collectible=================

print_enm_coll:
pusha
mov ax,0xb800
mov es,ax
mov ah,0x04

mov di,1140;
mov al,[enemyascii];
mov [es:di],ax

mov ah,0x02
add di,328

mov al,[collectibleascii];

mov [es:di],ax
popa
ret


;==========================================;show enemy and collectible down =================

print_enm_coll_down:
pusha
mov ax,0xb800
mov es,ax
mov ah,0x04

mov di,2080;
mov al,[enemyascii];
mov [es:di],ax




mov ah,0x02
add di,320

mov al,[collectibleascii];

mov [es:di],ax

mov ah,0x13
    mov al,0
    mov bh,0
mov bl,0x04
mov dh,13
    mov dl,2
    mov cx,13
    push ds
    pop es
    mov bp,score_str_min;the reference of the m1string to be printed
    int 0x10
	
	mov bl,0x02
	add dh,2
	
	mov bp,score_str_plus
	int 0x10
	
popa
ret 

;====================================print space===============================

print_space:
pusha
mov ax,0xb800
mov es,ax



mov ah,0x13
    mov al,0
    mov bh,0
	
mov bl,0x02 
mov dh,14
    mov dl,66
    mov cx,14
    push ds
    pop es
	
	mov bp,sp_mode_str;the reference of the m1string to be printed
    int 0x10
	add dh,1
	mov cx,1
	add dl,7
	mov bp,arrow_str_1;the reference of the m1string to be printed
    int 0x10
	
	add dh,1
	mov bp,arrow_str_2;the reference of the m1string to be printed
    int 0x10
	
	
	
	mov dl,67
	mov dh,17
	mov cx,13
    mov bl,0x07 

    mov bp,space_str_1;the reference of the m1string to be printed
    int 0x10
	
	add dh,1
	
	mov bp,space_str_2
	int 0x10
	add dh,1
	
	mov bp,space_str_3;the reference of the m1string to be printed
    int 0x10
popa
ret 


;===========================print movement ==============================
print_movement:

pusha
mov ax,0xb800
mov es,ax



mov ah,0x13
    mov al,0
    mov bh,0
	
mov bl,0x02
mov dh,8
    mov dl,69
    mov cx,9
    push ds
    pop es
	
	mov bp,movement_str;the reference of the m1string to be printed
    int 0x10

    mov dl,67
	mov dh,9
	mov cx,12
    mov bl,0x07 

    mov bp,wasd_str_1;the reference of the m1string to be printed
    int 0x10
	
	add dh,1
	
	mov bp,wasd_str_2
	int 0x10
	add dh,1
	
	mov bp,wasd_str_3;the reference of the m1string to be printed
    int 0x10
	
	popa
	ret


;===========================print quit esc ==============================
print_esc_quit:

pusha
mov ax,0xb800
mov es,ax



mov ah,0x13
    mov al,0
    mov bh,0
	
mov bl,0x04
mov dh,1
    mov dl,68
    mov cx,10
    push ds
    pop es
	
	mov bp,quit_str;the reference of the m1string to be printed
    int 0x10

    mov dl,69
	add dh,1
	mov cx,7
    mov bl,0x07 

    mov bp,esc_str1;the reference of the m1string to be printed
    int 0x10
	
	add dh,1
	
	mov bp,esc_str2
	int 0x10
	add dh,1
	
	mov bp,esc_str3;the reference of the m1string to be printed
    int 0x10
	
	popa
	ret


;====================================print description===============================

print_desc:
pusha
mov ax,0xb800
mov es,ax



mov ah,0x13
    mov al,0
    mov bh,0
	
mov bl,0x07
mov dh,20
    mov dl,1
    mov cx,12
    push ds
    pop es
	

    mov bp,desc_str1;the reference of the m1string to be printed
    int 0x10
	
	add dh,1
	
	mov bp,desc_str2
	int 0x10
	add dh,1
	
	mov bp,desc_str3;the reference of the m1string to be printed
    int 0x10
	
	mov ax,0xb800
mov es,ax
	mov ah,0x05
	mov di,2896;
	add di,322;
    mov al,227;
    mov [es:di],ax
	
popa
ret 


;====================================print seperations===============================

print_seper:
pusha
mov ax,0xb800
mov es,ax



mov ah,0x13
    mov al,0
    mov bh,0
	
mov bl,0x07
mov dh,5
    mov dl,0
    mov cx,16
    push ds
    pop es
	

    mov bp,sepertion_str;the reference of the m1string to be printed
    int 0x10
	
	add dh,6
	
	mov bp,sepertion_str
	int 0x10
	add dh,6
	
	mov bp,sepertion_str;the reference of the m1string to be printed
    int 0x10
	
	mov dh,23
	mov bp,sepertion_str;the reference of the m1string to be printed
    int 0x10
	
	
	
	mov dl,66
	mov dh,6
	mov cx,14
	
	mov bp,sepertion_str_r;the reference of the m1string to be printed
    int 0x10
	
	add dh,6
	
	mov bp,sepertion_str_r
	int 0x10
	add dh,8
	
	mov bp,sepertion_str_r;the reference of the m1string to be printed
    int 0x10
	
	mov dh,23
	mov bp,sepertion_str_r;the reference of the m1string to be printed
    int 0x10
	
popa
ret 



;=====================================================;quit game str print=======================
print_qg:
push bp
mov bp,sp
pusha
mov ah,0x13
    mov al,0
    mov bh,0
mov bl,0x04
mov dh,[level];automatically increases
inc byte [level]
    mov dl,0x23
    mov cx,9
    push ds
    pop es
    mov bp,[bp+4];the reference of the m1string to be printed
    int 0x10
popa
pop bp
ret 2


;=====================================================;time str print=======================
print_time_str:
push bp
mov bp,sp
pusha
mov ah,0x13
    mov al,0
    mov bh,0
mov bl,0x07
mov dh,[level];automatically increases
inc byte [level]
    mov dl,0x20
    mov cx,8
    push ds
    pop es
    mov bp,[bp+4];the reference of the m1string to be printed
    int 0x10
popa
pop bp
ret 2

;==========================================================print time after game ends=======================
time_print_eg:
pusha
mov di,3440 ;timer calculation starts here
mov ax,[min]
push di
push ax
call print_num_r
add di,2
mov ax,0x0720
mov [es:di],ax
mov al,':'
add di,2
mov [es:di],ax
add di,2
mov ax,0x0720
mov [es:di],ax
mov ax,[sec]
add di,2
push di
push ax
call print_num_r
popa
ret

;================================ print score when game ends============================

score_print_eg:
pusha
mov di,3120
mov ax,[score]
push di
push ax
call print_num_r
popa
ret


;=====================================================;time str print _maze=======================
print_time_str_mz:
push bp
mov bp,sp
pusha
mov ah,0x13
    mov al,0
    mov bh,0
mov bl,0x07
mov dh,[level];automatically increases
    mov dl,0x00
    mov cx,8
    push ds
    pop es
    mov bp,[bp+4];the reference of the m1string to be printed
    int 0x10
popa
pop bp
ret 2
 ;====================================================collectibleas str print_maze side============

print_coll_str_mz:
push bp
mov bp,sp
pusha
mov ah,0x13
    mov al,0
    mov bh,0
mov bl,0x02
mov dh,[level];automatically increases
    mov dl,0x00
    mov cx,14
    push ds
    pop es
    mov bp,[bp+4];the reference of the m1string to be printed
    int 0x10
popa
pop bp
ret 2


;=====================================================;left bracket for start game print=======================
print_lb_a:
push bp
mov bp,sp
pusha
mov ah,0x13
    mov al,0
    mov bh,0
mov bl,0x86
mov dh,[level];automatically increases
inc byte [level]
    mov dl,0x1e
    mov cx,3
    push ds
    pop es
    mov bp,[bp+4];the reference of the m1string to be printed
    int 0x10
popa
pop bp
ret 2
;=======================================================;right bracket for start game str print=====================
print_rb_a:
push bp
mov bp,sp
pusha
mov ah,0x13
    mov al,0
    mov bh,0
mov bl,0x86
mov dh,[level];automatically increases
inc byte [level]
    mov dl,0x2e
    mov cx,3
    push ds
    pop es
    mov bp,[bp+4];the reference of the m1string to be printed
    int 0x10
popa
pop bp
ret 2
;=============================================;left bracket for quit game styr print===============================
print_lb_b:
push bp
mov bp,sp
pusha
mov ah,0x13
    mov al,0
    mov bh,0
mov bl,0x86
mov dh,[level];automatically increases
inc byte [level]
    mov dl,0x1e
    mov cx,3
    push ds
    pop es
    mov bp,[bp+4];the reference of the m1string to be printed
    int 0x10
popa
pop bp
ret 2
;========================================================;right bracket for quit game str print====================
print_rb_b:
push bp
mov bp,sp
pusha
mov ah,0x13
    mov al,0
    mov bh,0
mov bl,0x86
mov dh,[level];automatically increases
inc byte [level]
    mov dl,0x2e
    mov cx,3
    push ds
    pop es
    mov bp,[bp+4];the reference of the m1string to be printed
    int 0x10
popa
pop bp
ret 2
;========================================;you word str print====================================

print_you_strs:
push bp
mov bp,sp
pusha
mov ah,0x13
    mov al,2
    mov bh,0
mov dh,[level];automatically increases
inc byte [level]
    mov dl, 0x18
    mov cx,30
    push ds
    pop es
    mov bp,[bp+4];the reference of the m1string to be printed
    int 0x10
popa
pop bp
ret 2

;==============================================;winnnnn word str print==============================

print_win_strs:
push bp
mov bp,sp
pusha
mov ah,0x13
    mov al,2
    mov bh,0
mov bl,0x01
mov dh,[level];automatically increases
inc byte [level]
    mov dl, 0x1A
    mov cx,28
    push ds
    pop es
    mov bp,[bp+4];the reference of the m1string to be printed
    int 0x10
popa
pop bp
ret 2
;========================================================;lose word str print====================

print_lose_strs:
push bp
mov bp,sp
pusha
mov ah,0x13
    mov al,2
    mov bh,0
mov bl,0x01
mov dh,[level];automatically increases
inc byte [level]
    mov dl, 0x14
    mov cx,38
    push ds
    pop es
    mov bp,[bp+4];the reference of the m1string to be printed
    int 0x10
popa
pop bp
ret 2
;=============================================================; printing the full win screen===============

win_screen:
call clrscreen
call left_border_green
call right_border_green
call you_print
call win_print
call eg_score_print
call eg_time_print
call time_print_eg
call score_print_eg

ret


;=============================================================; printing the full lose screen===============

lose_screen:
call clrscreen
call left_border_red
call right_border_red
call you_print_red
call lose_print
call eg_score_print
call eg_time_print
call time_print_eg
call score_print_eg
ret


;====================================maze sides printing====================
maze_side:
call mz_score_print
call mz_time_print
call mz_enemy_print
call mz_coll_print
call print_enm_coll
call print_enm_coll_down
call print_space
call print_movement
call print_desc
call print_esc_quit
call print_seper

ret


;===================================================================; func to generate random num=========

GenRandNum:
push bp
mov bp,sp;
pusha

mov ah, 00h ; interrupts to get system time
int 1Ah ; CX:DX now hold number of clock ticks since midnight
mov ax, dx
xor dx, dx
mov cx, 5;
div cx ; here dx contains the remainder of the division from 0 - 9
add dl, '0' ; to ascii from '0' to '3'

mov word [randNum],dx;
popa
pop bp;
ret
;==================================================================;function to select random maze==========
select_maze:
call GenRandNum
cmp word [randNum],'0'
jz first
cmp word [randNum],'1'
jz second
cmp word [randNum],'2'
jz third
cmp word [randNum],'3'
jz fourth
cmp word [randNum],'4'
jz fifth
ret
first:
call maze1
call hook_ints
call gameloop

ret
second:
call maze2
call hook_ints
call gameloop

ret
third:
call maze3
call hook_ints
call gameloop

ret

fourth:
call maze4
call hook_ints
call gameloop

ret
fifth:
call maze5
call hook_ints
call gameloop

ret
;================================================================set_game func to go through menu choices=============
set_game:

mov ah,0
int 0x16
cmp al,13
jz select_maze
cmp al,83
jz set_b_down
cmp al,115
jz set_b_down
jmp set_game

;=============================================================set_game2 func to go through menu choices================

set_game_2:
mov ah,0
int 0x16
cmp al,13
jz nxt
cmp al,87
jz print_menu
cmp al,119
jz print_menu
cmp al,115
jz print_menu
cmp al,83
jz print_menu
jmp set_game_2
nxt:
call clrscreen
jmp exit

;=============================================================== func to show the plkayer is hovering on quit game==============
set_b_down:
call clrscreen
call left_border_green
call right_border_green
call menu_word
call menu_word_run
call menu_sg_print
call menu_qg_print
call print_b_qg
jmp set_game_2


ret
;=====================================movement tab==================================================


;=============================================move_up=======================================================
move_up:
pusha
mov ax,0xb800
mov es,ax
mov di,[playerpos]
mov si,di
cmp byte [supermode],0
jz normal_up
cmp byte [supermode],1
jz special_up


normal_up:
sub si,160
cmp word [es:si],0x33D8
jz no_up
add si,2
cmp word [es:si],0x33D8
jz no_up
sub si,2
jmp cont_up

special_up:
sub si,160
cmp word [es:si],0x33D8
jz blocked_up
add si,2
cmp word [es:si],0x33D8
jz blocked_up
sub si,2
jmp special_up

blocked_up:
add si,160

cont_up:
mov ax,0x00D8
mov [es:di],ax
mov di,si
mov [playerpos],di
mov ah,0x05
mov al,[playerascii]
mov [es:si],ax
no_up:
popa
jmp kbsir_out

;==================================================move_down==================================================
move_down:
pusha
mov ax,0xb800
mov es,ax
mov di,[playerpos]
mov si,di
cmp byte [supermode],0
jz normal_down
cmp byte [supermode],1
jz special_down


normal_down:
add si,160
cmp word [es:si],0x33D8
jz no_down
add si,2
cmp word [es:si],0x33D8
jz no_down
sub si,2
jmp cont_down

special_down:
add si,160
cmp word [es:si],0x33D8
jz blocked_down
add si,2
cmp word [es:si],0x33D8
jz blocked_down
sub si,2
jmp special_down

blocked_down:
sub si,160

cont_down:
mov ax,0x00D8
mov [es:di],ax
mov di,si
mov [playerpos],di
mov ah,0x05
mov al,[playerascii]
mov [es:si],ax
no_down:
popa
jmp kbsir_out
;======================================================move_right===============================================
move_right:
pusha
mov ax,0xb800
mov es,ax
mov di,[playerpos]
mov si,di

cmp byte [supermode],0
jz normal_right
cmp byte [supermode],1
jz special_right


normal_right:
add si,4
cmp word [es:si],0x33D8
jz no_right
add si,2
cmp word [es:si],0x33D8
jz no_right
sub si,2
jmp cont_right

special_right:
add si,4
cmp word [es:si],0x33D8
jz blocked_right
add si,2
cmp word [es:si],0x33D8
jz blocked_right
sub si,2
jmp special_right

blocked_right:
sub si,4

cont_right:
mov ax,0x00D8
mov [es:di],ax
mov di,si
mov [playerpos],di
mov ah,0x05
mov al,[playerascii]
mov [es:si],ax
no_right:
popa
jmp kbsir_out
;==============================================================move_left========================================
move_left:
pusha
mov ax,0xb800
mov es,ax
mov di,[playerpos]
mov si,di

cmp byte [supermode],0
jz normal_left
cmp byte [supermode],1
jz special_left


normal_left:
sub si,4
cmp word [es:si],0x33D8
jz no_left
add si,2
cmp word [es:si],0x33D8
jz no_left
sub si,2
jmp cont_left

special_left:
sub si,4
cmp word [es:si],0x33D8
jz blocked_left
add si,2
cmp word [es:si],0x33D8
jz blocked_left
sub si,2
jmp special_left

blocked_left:
add si,4

cont_left:
mov ax,0x00D8
mov [es:di],ax
mov di,si
mov [playerpos],di
mov ah,0x05
mov al,[playerascii]
mov [es:si],ax
no_left:
popa
jmp kbsir_out
;==================================================================func for supper mode===================================
supaa_nig:

cmp byte [supermode],0
jz super_on
cmp byte [supermode],1
jz super_off
jmp no_toggle

super_on:
mov byte [supermode],1
jmp no_toggle

super_off:
mov byte [supermode],0
jmp no_toggle

no_toggle:
cmp byte [supermode],0
jz print_supermode_on

cmp byte [supermode],1
jz print_supermode_off

print_supermode_on:
pusha
mov ah,0x13
    mov al,0
    mov bh,0
mov bl,0x04
mov dh,22
    mov dl,67
    mov cx,13
    push ds
    pop es
    mov bp,super_off_status;the reference of the m1string to be printed
    int 0x10
popa
jmp kbsir_out

print_supermode_off:
pusha
mov ah,0x13
    mov al,0
    mov bh,0
mov bl,0x02
mov dh,22
    mov dl,67
    mov cx,13
    push ds
    pop es
    mov bp,super_on_status;the reference of the m1string to be printed
    int 0x10
popa
jmp kbsir_out
;=================================================================================================================================
saving_old_isrs:
pusha
xor ax,ax
mov es,ax
mov ax,[es:9*4]
mov [old_kbisr],ax
mov ax,[es:9*4+2]
mov [old_kbisr+2],ax
mov ax,[es:8*4]
mov [old_timer],ax
mov ax,[es:8*4+2]
mov [old_timer+2],ax
popa
ret
;==================================================================================================================================
retrieving_old_isrs:
pusha
xor ax,ax
mov es,ax
mov ax,[old_kbisr]
mov [es:9*4],ax
mov ax,[old_kbisr+2]
mov [es:9*4+2],ax
mov ax,[old_timer]
mov [es:8*4],ax
mov ax,[old_timer+2]
mov [es:8*4+2],ax
popa
ret
;=======================================================================hooking inturrepts========================================
hook_ints:
pusha
xor ax,ax
mov es,ax
cli
mov word [es:8*4],timer
mov word [es:8*4+2],cs
mov word [es:9*4],kbisr
mov word [es:9*4+2],cs
sti
popa
ret
;===================================================================Timer function==============================================
timer:
push ax
inc byte [tick];
inc byte [tick];
inc byte [tick];
cmp byte [tick],60
jz sec_inc
mov al,0x20
out 0x20,al
pop ax
iret
sec_inc:
inc byte [sec]
mov byte [tick],0
cmp byte [sec],60
jz min_inc
mov al,0x20
out 0x20,al
pop ax
iret
min_inc:
inc byte [min];
mov byte [sec],0
pusha
mov ax,0x0720
mov cx,8
mov di,176
cld
rep stosw
popa
mov al,0x20
out 0x20,al
pop ax
iret
;===========================================================================func to print number========================================
print_num:
push bp
mov bp,sp
pusha
mov ax,0xb800
mov es,ax
mov ax,[bp+4];number to print
mov bx,10
mov cx,0

nextdigit:
mov dx,0
div bx
add dl,0x30
push dx
inc cx
cmp ax,0
jnz nextdigit

mov di,[bp+6]

nextpos:
pop dx
mov dh,0x07
mov [es:di],dx
add di,2
loop nextpos

popa
pop bp
ret 4
;========================print num red==================
print_num_r:
push bp
mov bp,sp
pusha
mov ax,0xb800
mov es,ax
mov ax,[bp+4];number to print
mov bx,10
mov cx,0

nextdigit_r:
mov dx,0
div bx
add dl,0x30
push dx
inc cx
cmp ax,0
jnz nextdigit_r

mov di,[bp+6]

nextpos_r:
pop dx
mov dh,0x0C
mov [es:di],dx
add di,2
loop nextpos_r

popa
pop bp
ret 4
;===============================================================;printing time====================================================
update_time:

pusha
mov di,178 ;timer calculation starts here
mov ax,[min]
push di
push ax

mov bx,0

cmp ax,1
jz check_sec

normal:
cmp bx,1
jz print_red_min

call print_num
jmp lll
print_red_min:
call print_num_r

lll:

add di,2
mov ax,0x0720
mov [es:di],ax
mov al,':'
add di,2
mov [es:di],ax
add di,2
mov ax,0x0720
mov [es:di],ax
mov ax,[sec]
add di,2
push di
push ax

cmp bx,1
jz red_print
call print_num
popa
ret

red_print:
call print_num_r
popa
ret

check_sec:
mov ax,[sec]
cmp ax,30
jb normal

mov bx,1
jmp normal


;==============================================;score calculation starts here============================================
update_score:
pusha
cmp word [randNum],'0'
jz maze1_enemy
cmp word [randNum],'1'
jz maze2_enemy
cmp word [randNum],'2'
jz maze3_enemy
cmp word [randNum],'3'
jz maze4_enemy
cmp word [randNum],'4'
jz maze5_enemy


maze1_enemy:
mov cx,5
mov bx,m1_enemypos;
mov si,0
jmp r1

maze2_enemy:
mov cx,5
mov bx,m2_enemypos;
mov si,0
jmp r1

maze3_enemy:
mov cx,5
mov bx,m3_enemypos;
mov si,0
jmp r1

maze4_enemy:
mov cx,5
mov bx,m4_enemypos;
mov si,0
jmp r1

maze5_enemy:
mov cx,5
mov bx,m5_enemypos;
mov si,0
jmp r1

r1:
mov ax,[bx+si]
cmp word [playerpos],ax
jz decrement_score
add si,2
loop r1
jmp skip1

decrement_score:
mov word [bx+si],0
cmp word [score],0
jz skip1
sub word [score],10
jmp skip1

skip1:
;for collectibles
cmp word [randNum],'0'
jz maze1_collect
cmp word [randNum],'1'
jz maze2_collect
cmp word [randNum],'2'
jz maze3_collect
cmp word [randNum],'3'
jz maze4_collect
cmp word [randNum],'4'
jz maze5_collect


maze1_collect:
mov cx,5
mov bx,m1_collectiblepos;
mov si,0
jmp r2

maze2_collect:
mov cx,5
mov bx,m2_collectiblepos;
mov si,0
jmp r2

maze3_collect:
mov cx,5
mov bx,m3_collectiblepos;
mov si,0
jmp r2

maze4_collect:
mov cx,5
mov bx,m4_collectiblepos;
mov si,0
jmp r2

maze5_collect:
mov cx,5
mov bx,m5_collectiblepos;
mov si,0
jmp r2

r2:
mov ax,[bx+si]
cmp word [playerpos],ax
jz increment_score
add si,2
loop r2
jmp skip

increment_score:
mov word [bx+si],0
add word [score],20
jmp skip

skip:
mov di,338
mov ax,[score]
push di
push ax
call print_num
popa
ret
;=====================================================check if player has reached the destination or not===========================================
update:
pusha
cmp byte [terminate],1
jz exit
call update_time
call update_score
mov cx,[endpos];the cherry pie position
mov dx,[playerpos];the player position
cmp cx,dx
jz win

;=======================
cmp byte [min],2
jz lose
;=======================
popa
ret
win:
call win_screen
popa
call exit ;means we won the game
lose:

call lose_screen
popa
call exit; ;we lose the game BOHOOOOO!
;=============================keep this always on top of start(mainloop)===============================================
kbisr:
pusha
in al,0x60
cmp al,0x01;esc key
jz exit_key
cmp al,0x11
jz move_up
cmp al,0x1f
jz move_down
cmp al,0x1e
jz move_left
cmp al,0x20
jz move_right
cmp al,0x39
jz supaa_nig
kbsir_out:
popa
jmp far [cs:old_kbisr]
iret
exit_key:
popa
mov byte [terminate],1
jmp far [cs:old_kbisr]
iret
;=====================================================func to continue the loop of the game==========================================================
gameloop:
call update
jmp gameloop
;=============================keep this always on top of start(mainloop)===============================================
;======================================================main start func to be called =======================
start:
call saving_old_isrs
call print_menu
;=====================================================to end the game =======================
exit:
call retrieving_old_isrs
mov ax,0x4c00
int 0x21